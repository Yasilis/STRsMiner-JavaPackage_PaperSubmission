rm(list=ls())
library(biomaRt)
# dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/RStudio/PGM/Main-Project/Raw_Data"
dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/IdeaProjects/STRsMiner1.0.0.3/assets"
listEnsembl()
ensembl = useEnsembl(biomart="ensembl")
datasets = listDatasets(ensembl)
dim(datasets)
write.table(datasets, paste(dataDirectory, "/GeneDatasetNameList.txt" ,sep = ""), sep = "$", quote = FALSE, row.names = FALSE)
rm(list=ls())
library(biomaRt)
install.packages("biomartr")
library(biomaRt)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
rm(list=ls())
library(biomaRt)
# dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/RStudio/PGM/Main-Project/Raw_Data"
# dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/IdeaProjects/STRsMiner1.0.0.3/assets"
dataDirectory = "E:/Codes/IdeaProjects/strsminer/assets"
listEnsembl()
ensembl = useEnsembl(biomart="ensembl")
datasets = listDatasets(ensembl)
dim(datasets)
write.table(datasets, paste(dataDirectory, "/GeneDatasetNameList.txt" ,sep = ""), sep = "$", quote = FALSE, row.names = FALSE)
rm(list=ls())
library(ggplot2)
library(ggfortify)
library(corrplot)
dataFileAddress = "F:/MyLibraries/Documents/UniFolders/PHd/Courses/Machine Learning/Project/MainProject/"
file.1 = "2019_11_27__12_36_20__sparse_matrix.csv"
myData = read.csv(paste(dataFileAddress, file.1, sep = ""), header = TRUE, sep = "\t", check.names=FALSE)
myDataLabels = myData$IDs
# length(myDataLabels)
myDataLabels = as.character(myDataLabels)
head(myDataLabels)
which(startsWith(x = as.character(myData$IDs), prefix = "UFO"))
myDataLabels[which(startsWith(x = as.character(myData$IDs), prefix = "UFO"))] = "0"
myDataLabels[which(!startsWith(x = as.character(myData$IDs), prefix = "UFO"))] = "1"
# length(which(myDataLabels == '1'))
# length(which(myDataLabels == '0'))
myDataLabels = as.factor(myDataLabels)
head(myDataLabels)
# set the seed to make partitions reproducible
set.seed(1723)
grep("^ID$", colnames(myData))
grep("^IDs$", colnames(myData))
dim(myData)
############################################     Explor The Data    ###############################################
total.data = cbind(myData, myDataLabels)
dim(total.data)
grep("^IDs$", colnames(total.data))
grep("^myDataLabels$", colnames(total.data))
############################################     Explor The Data    ###############################################
total.data = cbind(myDataLabels, myData)
grep("^IDs$", colnames(total.data))
grep("^myDataLabels$", colnames(total.data))
class(total.data)
dim(total.data)
dim(myData)
index.of.IDs = grep("^IDs$", colnames(total.data))
index.of.Labels = grep("^myDataLabels$", colnames(total.data))
index.of.IDs
index.of.Labels
# dim(total.data)
# dim(myData)
rm(myData)
rm(myDataLabels)
shuffle.total.data = total.data[sample(nrow(total.data)), ]
# head(shuffle.total.data)[,5760:5770]
# dim(shuffle.total.data)
rm(total.data)
index.of.IDs = grep("^IDs$", colnames(shuffle.total.data))
index.of.Labels = grep("^myDataLabels$", colnames(shuffle.total.data))
index.of.IDs
index.of.Labels
head(shuffle.total.data)[,1:20]
head(shuffle.total.data)[,1:5]
shuffle.total.data[1:10,1:5]
PCA.result = prcomp(shuffle.total.data[,c(-index.of.IDs,-index.of.Labels)], center = TRUE, scale = TRUE)
corMatrix = cor(shuffle.total.data[,which(apply(shuffle.total.data, 2, var) > 5 * 10^7, arr.ind = TRUE)])
corrplot(corMatrix, method="ellipse", order="hclust", col = brewer.pal(n=8, name="PuOr"))
library(RColorBrewer)
library (randomForest)
corrplot(corMatrix, method="ellipse", order="hclust", col = brewer.pal(n=8, name="PuOr"))
dim(corMatrix)
num = matrix(0,nrow = 1, ncol = 2)
colnames(num) = c(1,2)
for (i in 0:1)
{
Data = shuffle.total.data[which(shuffle.total.data$myDataLabels == i),1]
num[i] = length(Data)[1]
}
num
num = matrix(0,nrow = 1, ncol = 2)
colnames(num) = c(0,1)
for (i in 0:1)
{
Data = shuffle.total.data[which(shuffle.total.data$myDataLabels == i),1]
num[i] = length(Data)[1]
}
num
head(shuffle.total.data$myDataLabels)
num = matrix(0,nrow = 1, ncol = 2)
colnames(num) = c(0,1)
for (i in 0:1)
{
Data = shuffle.total.data[which(shuffle.total.data$myDataLabels == i),1]
num[i+1] = length(Data)[1]
}
num
dev.off()
barplot(num, main="Frequency of Labels", xlab="Labels", ylab = "Number of Label")
rm(list=ls())
rm(list=ls())
dataFileAddress = "F:/MyLibraries/Documents/UniFolders/PHd/Courses/Machine Learning/Project/MainProject/"
file.1 = "2019_11_27__12_36_20__sparse_matrix.csv"
myData = read.csv(paste(dataFileAddress, file.1, sep = ""), header = TRUE, sep = "\t", check.names=FALSE)
write.csv(myData, file = paste(dataFileAddress, "out__", file.1, sep = ""))
rm(list=ls())
library(biomaRt)
# dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/RStudio/PGM/Main-Project/Raw_Data"
dataDirectory = "F:/MyLibraries/Documents/TemplateCodes/Codes/IdeaProjects/STRsMiner1.0.0.3/assets"
listEnsembl()
ensembl = useEnsembl(biomart="ensembl")
datasets = listDatasets(ensembl)
dim(datasets)
write.table(datasets, paste(dataDirectory, "/GeneDatasetNameList.txt" ,sep = ""), sep = "$", quote = FALSE, row.names = FALSE)
